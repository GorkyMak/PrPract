//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PrPract.Database
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class АСКУЭEntities : DbContext
    {
        public АСКУЭEntities()
            : base("name=АСКУЭEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Абонент> Абонент { get; set; }
        public virtual DbSet<Адрес> Адрес { get; set; }
        public virtual DbSet<Акт_снятия_показаний_приборов_учета> Акт_снятия_показаний_приборов_учета { get; set; }
        public virtual DbSet<Временной_период> Временной_период { get; set; }
        public virtual DbSet<Данные_о_жилой_площади> Данные_о_жилой_площади { get; set; }
        public virtual DbSet<Доверенность> Доверенность { get; set; }
        public virtual DbSet<Договор_энергоснабжения> Договор_энергоснабжения { get; set; }
        public virtual DbSet<Зона_суток> Зона_суток { get; set; }
        public virtual DbSet<Контактные_данные> Контактные_данные { get; set; }
        public virtual DbSet<Личные_данные> Личные_данные { get; set; }
        public virtual DbSet<Паспорт> Паспорт { get; set; }
        public virtual DbSet<Показания_прибора_учета> Показания_прибора_учета { get; set; }
        public virtual DbSet<Пользователь> Пользователь { get; set; }
        public virtual DbSet<Представитель_компании> Представитель_компании { get; set; }
        public virtual DbSet<Прибор_учёта> Прибор_учёта { get; set; }
        public virtual DbSet<Ставка> Ставка { get; set; }
        public virtual DbSet<Тариф> Тариф { get; set; }
        public virtual DbSet<ПредставлениеАбонент> ПредставлениеАбонент { get; set; }
        public virtual DbSet<ПредставлениеАкты> ПредставлениеАкты { get; set; }
        public virtual DbSet<ПредставлениеДоговоры> ПредставлениеДоговоры { get; set; }
        public virtual DbSet<ПредставлениеЗоны_суток> ПредставлениеЗоны_суток { get; set; }
        public virtual DbSet<ПредставлениеКонт_д> ПредставлениеКонт_д { get; set; }
        public virtual DbSet<ПредставлениеЛичн_д> ПредставлениеЛичн_д { get; set; }
        public virtual DbSet<ПредставлениеПаспорт> ПредставлениеПаспорт { get; set; }
        public virtual DbSet<ПредставлениеПредставитель_компании> ПредставлениеПредставитель_компании { get; set; }
        public virtual DbSet<ПредставлениеСтавки> ПредставлениеСтавки { get; set; }
        public virtual DbSet<ПредставлениеТарифы> ПредставлениеТарифы { get; set; }
    
        [DbFunction("АСКУЭEntities", "ПоискПоказанийАбонента")]
        public virtual IQueryable<ПоискПоказанийАбонента_Result> ПоискПоказанийАбонента(Nullable<int> idContract)
        {
            var idContractParameter = idContract.HasValue ?
                new ObjectParameter("idContract", idContract) :
                new ObjectParameter("idContract", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ПоискПоказанийАбонента_Result>("[АСКУЭEntities].[ПоискПоказанийАбонента](@idContract)", idContractParameter);
        }
    
        [DbFunction("АСКУЭEntities", "ПоискПоследнегоСнятияПоказаний")]
        public virtual IQueryable<ПоискПоследнегоСнятияПоказаний_Result> ПоискПоследнегоСнятияПоказаний(Nullable<int> idContract)
        {
            var idContractParameter = idContract.HasValue ?
                new ObjectParameter("idContract", idContract) :
                new ObjectParameter("idContract", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ПоискПоследнегоСнятияПоказаний_Result>("[АСКУЭEntities].[ПоискПоследнегоСнятияПоказаний](@idContract)", idContractParameter);
        }
    
        [DbFunction("АСКУЭEntities", "ПоискСтавокАбонента")]
        public virtual IQueryable<ПоискСтавокАбонента_Result> ПоискСтавокАбонента(Nullable<int> idContract)
        {
            var idContractParameter = idContract.HasValue ?
                new ObjectParameter("idContract", idContract) :
                new ObjectParameter("idContract", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ПоискСтавокАбонента_Result>("[АСКУЭEntities].[ПоискСтавокАбонента](@idContract)", idContractParameter);
        }
    
        [DbFunction("АСКУЭEntities", "ФильтрацияАбонентовПоУлице")]
        public virtual IQueryable<ФильтрацияАбонентовПоУлице_Result> ФильтрацияАбонентовПоУлице(string street)
        {
            var streetParameter = street != null ?
                new ObjectParameter("street", street) :
                new ObjectParameter("street", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ФильтрацияАбонентовПоУлице_Result>("[АСКУЭEntities].[ФильтрацияАбонентовПоУлице](@street)", streetParameter);
        }
    
        [DbFunction("АСКУЭEntities", "ФильтрацияПриборовУчёта")]
        public virtual IQueryable<ФильтрацияПриборовУчёта_Result> ФильтрацияПриборовУчёта(string marka, string type, Nullable<int> calcCoeff, Nullable<int> period)
        {
            var markaParameter = marka != null ?
                new ObjectParameter("marka", marka) :
                new ObjectParameter("marka", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var calcCoeffParameter = calcCoeff.HasValue ?
                new ObjectParameter("CalcCoeff", calcCoeff) :
                new ObjectParameter("CalcCoeff", typeof(int));
    
            var periodParameter = period.HasValue ?
                new ObjectParameter("period", period) :
                new ObjectParameter("period", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ФильтрацияПриборовУчёта_Result>("[АСКУЭEntities].[ФильтрацияПриборовУчёта](@marka, @type, @CalcCoeff, @period)", markaParameter, typeParameter, calcCoeffParameter, periodParameter);
        }
    
        [DbFunction("АСКУЭEntities", "ФильтрацияТарифов")]
        public virtual IQueryable<ФильтрацияТарифов_Result> ФильтрацияТарифов(string typeMeter, string groupConsumer)
        {
            var typeMeterParameter = typeMeter != null ?
                new ObjectParameter("typeMeter", typeMeter) :
                new ObjectParameter("typeMeter", typeof(string));
    
            var groupConsumerParameter = groupConsumer != null ?
                new ObjectParameter("groupConsumer", groupConsumer) :
                new ObjectParameter("groupConsumer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ФильтрацияТарифов_Result>("[АСКУЭEntities].[ФильтрацияТарифов](@typeMeter, @groupConsumer)", typeMeterParameter, groupConsumerParameter);
        }
    
        public virtual int ДобавлениеАбонент(Nullable<int> id, Nullable<int> idContData, Nullable<int> idPersData, Nullable<int> idHouseData)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var idContDataParameter = idContData.HasValue ?
                new ObjectParameter("idContData", idContData) :
                new ObjectParameter("idContData", typeof(int));
    
            var idPersDataParameter = idPersData.HasValue ?
                new ObjectParameter("idPersData", idPersData) :
                new ObjectParameter("idPersData", typeof(int));
    
            var idHouseDataParameter = idHouseData.HasValue ?
                new ObjectParameter("idHouseData", idHouseData) :
                new ObjectParameter("idHouseData", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавлениеАбонент", idParameter, idContDataParameter, idPersDataParameter, idHouseDataParameter);
        }
    
        public virtual int ДобавлениеАдрес(string street, string home, string apart)
        {
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var homeParameter = home != null ?
                new ObjectParameter("Home", home) :
                new ObjectParameter("Home", typeof(string));
    
            var apartParameter = apart != null ?
                new ObjectParameter("Apart", apart) :
                new ObjectParameter("Apart", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавлениеАдрес", streetParameter, homeParameter, apartParameter);
        }
    
        public virtual int ДобавлениеАкт_снятия_показаний_приборов_учета(Nullable<int> idStatDevMeter, Nullable<System.DateTime> date)
        {
            var idStatDevMeterParameter = idStatDevMeter.HasValue ?
                new ObjectParameter("idStatDevMeter", idStatDevMeter) :
                new ObjectParameter("idStatDevMeter", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавлениеАкт_снятия_показаний_приборов_учета", idStatDevMeterParameter, dateParameter);
        }
    
        public virtual int ДобавлениеВр_пер(Nullable<int> idNameZoneDay, Nullable<System.TimeSpan> begTime, Nullable<System.TimeSpan> endTime)
        {
            var idNameZoneDayParameter = idNameZoneDay.HasValue ?
                new ObjectParameter("idNameZoneDay", idNameZoneDay) :
                new ObjectParameter("idNameZoneDay", typeof(int));
    
            var begTimeParameter = begTime.HasValue ?
                new ObjectParameter("BegTime", begTime) :
                new ObjectParameter("BegTime", typeof(System.TimeSpan));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавлениеВр_пер", idNameZoneDayParameter, begTimeParameter, endTimeParameter);
        }
    
        public virtual int ДобавлениеДанные_о_жилой_площади(Nullable<decimal> areaLiveHouse, Nullable<int> countRoom, Nullable<int> countLivePeople)
        {
            var areaLiveHouseParameter = areaLiveHouse.HasValue ?
                new ObjectParameter("areaLiveHouse", areaLiveHouse) :
                new ObjectParameter("areaLiveHouse", typeof(decimal));
    
            var countRoomParameter = countRoom.HasValue ?
                new ObjectParameter("countRoom", countRoom) :
                new ObjectParameter("countRoom", typeof(int));
    
            var countLivePeopleParameter = countLivePeople.HasValue ?
                new ObjectParameter("countLivePeople", countLivePeople) :
                new ObjectParameter("countLivePeople", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавлениеДанные_о_жилой_площади", areaLiveHouseParameter, countRoomParameter, countLivePeopleParameter);
        }
    
        public virtual int ДобавлениеДоверенность(string id, Nullable<System.DateTime> date)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавлениеДоверенность", idParameter, dateParameter);
        }
    
        public virtual int ДобавлениеДоговор_энергоснабжения(Nullable<int> id, Nullable<int> numMeterDev, Nullable<int> idAbonent, Nullable<int> idTariff, Nullable<int> idPresentComp, Nullable<System.DateTime> date, string specIf)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var numMeterDevParameter = numMeterDev.HasValue ?
                new ObjectParameter("numMeterDev", numMeterDev) :
                new ObjectParameter("numMeterDev", typeof(int));
    
            var idAbonentParameter = idAbonent.HasValue ?
                new ObjectParameter("idAbonent", idAbonent) :
                new ObjectParameter("idAbonent", typeof(int));
    
            var idTariffParameter = idTariff.HasValue ?
                new ObjectParameter("idTariff", idTariff) :
                new ObjectParameter("idTariff", typeof(int));
    
            var idPresentCompParameter = idPresentComp.HasValue ?
                new ObjectParameter("idPresentComp", idPresentComp) :
                new ObjectParameter("idPresentComp", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var specIfParameter = specIf != null ?
                new ObjectParameter("specIf", specIf) :
                new ObjectParameter("specIf", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавлениеДоговор_энергоснабжения", idParameter, numMeterDevParameter, idAbonentParameter, idTariffParameter, idPresentCompParameter, dateParameter, specIfParameter);
        }
    
        public virtual int ДобавлениеЗона_с(Nullable<int> id, string name)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавлениеЗона_с", idParameter, nameParameter);
        }
    
        public virtual int ДобавлениеКонтактные_данные(Nullable<int> idAddress, string mobPhone, string phone, string email)
        {
            var idAddressParameter = idAddress.HasValue ?
                new ObjectParameter("idAddress", idAddress) :
                new ObjectParameter("idAddress", typeof(int));
    
            var mobPhoneParameter = mobPhone != null ?
                new ObjectParameter("mobPhone", mobPhone) :
                new ObjectParameter("mobPhone", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавлениеКонтактные_данные", idAddressParameter, mobPhoneParameter, phoneParameter, emailParameter);
        }
    
        public virtual int ДобавлениеЛичные_данные(string ln, string fn, string patronomyc, string gender, Nullable<System.DateTime> birthday)
        {
            var lnParameter = ln != null ?
                new ObjectParameter("ln", ln) :
                new ObjectParameter("ln", typeof(string));
    
            var fnParameter = fn != null ?
                new ObjectParameter("fn", fn) :
                new ObjectParameter("fn", typeof(string));
    
            var patronomycParameter = patronomyc != null ?
                new ObjectParameter("patronomyc", patronomyc) :
                new ObjectParameter("patronomyc", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("birthday", birthday) :
                new ObjectParameter("birthday", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавлениеЛичные_данные", lnParameter, fnParameter, patronomycParameter, genderParameter, birthdayParameter);
        }
    
        public virtual int ДобавлениеПаспорт(Nullable<int> seria, Nullable<int> num, string whoGive, Nullable<int> idAddress)
        {
            var seriaParameter = seria.HasValue ?
                new ObjectParameter("seria", seria) :
                new ObjectParameter("seria", typeof(int));
    
            var numParameter = num.HasValue ?
                new ObjectParameter("num", num) :
                new ObjectParameter("num", typeof(int));
    
            var whoGiveParameter = whoGive != null ?
                new ObjectParameter("whoGive", whoGive) :
                new ObjectParameter("whoGive", typeof(string));
    
            var idAddressParameter = idAddress.HasValue ?
                new ObjectParameter("idAddress", idAddress) :
                new ObjectParameter("idAddress", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавлениеПаспорт", seriaParameter, numParameter, whoGiveParameter, idAddressParameter);
        }
    
        public virtual int ДобавлениеПоказания_прибора_учёта(Nullable<int> iDContract, Nullable<int> prevStat, Nullable<int> currStat, Nullable<System.DateTime> date, Nullable<bool> endStat)
        {
            var iDContractParameter = iDContract.HasValue ?
                new ObjectParameter("IDContract", iDContract) :
                new ObjectParameter("IDContract", typeof(int));
    
            var prevStatParameter = prevStat.HasValue ?
                new ObjectParameter("PrevStat", prevStat) :
                new ObjectParameter("PrevStat", typeof(int));
    
            var currStatParameter = currStat.HasValue ?
                new ObjectParameter("CurrStat", currStat) :
                new ObjectParameter("CurrStat", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var endStatParameter = endStat.HasValue ?
                new ObjectParameter("endStat", endStat) :
                new ObjectParameter("endStat", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавлениеПоказания_прибора_учёта", iDContractParameter, prevStatParameter, currStatParameter, dateParameter, endStatParameter);
        }
    
        public virtual int ДобавлениеПользователь(string login, string password, string role)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("role", role) :
                new ObjectParameter("role", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавлениеПользователь", loginParameter, passwordParameter, roleParameter);
        }
    
        public virtual int ДобавлениеПредставитель_компании(Nullable<int> idPersData, string numDov)
        {
            var idPersDataParameter = idPersData.HasValue ?
                new ObjectParameter("idPersData", idPersData) :
                new ObjectParameter("idPersData", typeof(int));
    
            var numDovParameter = numDov != null ?
                new ObjectParameter("numDov", numDov) :
                new ObjectParameter("numDov", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавлениеПредставитель_компании", idPersDataParameter, numDovParameter);
        }
    
        public virtual int ДобавлениеПрибор_учета(Nullable<int> id, string marka, string type, Nullable<int> calcCoeff, Nullable<System.DateTime> dateInstall, string destInstall)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var markaParameter = marka != null ?
                new ObjectParameter("marka", marka) :
                new ObjectParameter("marka", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var calcCoeffParameter = calcCoeff.HasValue ?
                new ObjectParameter("CalcCoeff", calcCoeff) :
                new ObjectParameter("CalcCoeff", typeof(int));
    
            var dateInstallParameter = dateInstall.HasValue ?
                new ObjectParameter("dateInstall", dateInstall) :
                new ObjectParameter("dateInstall", typeof(System.DateTime));
    
            var destInstallParameter = destInstall != null ?
                new ObjectParameter("destInstall", destInstall) :
                new ObjectParameter("destInstall", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавлениеПрибор_учета", idParameter, markaParameter, typeParameter, calcCoeffParameter, dateInstallParameter, destInstallParameter);
        }
    
        public virtual int ДобавлениеСтавка(string idTariff, string idZoneDay, Nullable<decimal> cost)
        {
            var idTariffParameter = idTariff != null ?
                new ObjectParameter("idTariff", idTariff) :
                new ObjectParameter("idTariff", typeof(string));
    
            var idZoneDayParameter = idZoneDay != null ?
                new ObjectParameter("idZoneDay", idZoneDay) :
                new ObjectParameter("idZoneDay", typeof(string));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("cost", cost) :
                new ObjectParameter("cost", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавлениеСтавка", idTariffParameter, idZoneDayParameter, costParameter);
        }
    
        public virtual int ДобавлениеТариф(Nullable<int> id, string typeMeter, string groupConsumer)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var typeMeterParameter = typeMeter != null ?
                new ObjectParameter("typeMeter", typeMeter) :
                new ObjectParameter("typeMeter", typeof(string));
    
            var groupConsumerParameter = groupConsumer != null ?
                new ObjectParameter("groupConsumer", groupConsumer) :
                new ObjectParameter("groupConsumer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ДобавлениеТариф", idParameter, typeMeterParameter, groupConsumerParameter);
        }
    
        public virtual int ИзменениеАбонент(Nullable<int> id, Nullable<int> idContData, Nullable<int> idPersData, Nullable<int> idHouseData)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var idContDataParameter = idContData.HasValue ?
                new ObjectParameter("idContData", idContData) :
                new ObjectParameter("idContData", typeof(int));
    
            var idPersDataParameter = idPersData.HasValue ?
                new ObjectParameter("idPersData", idPersData) :
                new ObjectParameter("idPersData", typeof(int));
    
            var idHouseDataParameter = idHouseData.HasValue ?
                new ObjectParameter("idHouseData", idHouseData) :
                new ObjectParameter("idHouseData", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменениеАбонент", idParameter, idContDataParameter, idPersDataParameter, idHouseDataParameter);
        }
    
        public virtual int ИзменениеАдрес(Nullable<int> iD, string street, string home, string apart)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var homeParameter = home != null ?
                new ObjectParameter("Home", home) :
                new ObjectParameter("Home", typeof(string));
    
            var apartParameter = apart != null ?
                new ObjectParameter("Apart", apart) :
                new ObjectParameter("Apart", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменениеАдрес", iDParameter, streetParameter, homeParameter, apartParameter);
        }
    
        public virtual int ИзменениеАкт_снятия_показаний_приборов_учета(Nullable<int> id, Nullable<int> idStatDevMeter, Nullable<System.DateTime> date)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var idStatDevMeterParameter = idStatDevMeter.HasValue ?
                new ObjectParameter("idStatDevMeter", idStatDevMeter) :
                new ObjectParameter("idStatDevMeter", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменениеАкт_снятия_показаний_приборов_учета", idParameter, idStatDevMeterParameter, dateParameter);
        }
    
        public virtual int ИзменениеВр_пер(Nullable<int> iD, Nullable<int> idNameZoneDay, Nullable<System.TimeSpan> begTime, Nullable<System.TimeSpan> endTime)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var idNameZoneDayParameter = idNameZoneDay.HasValue ?
                new ObjectParameter("idNameZoneDay", idNameZoneDay) :
                new ObjectParameter("idNameZoneDay", typeof(int));
    
            var begTimeParameter = begTime.HasValue ?
                new ObjectParameter("BegTime", begTime) :
                new ObjectParameter("BegTime", typeof(System.TimeSpan));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменениеВр_пер", iDParameter, idNameZoneDayParameter, begTimeParameter, endTimeParameter);
        }
    
        public virtual int ИзменениеДанные_о_жилой_площади(Nullable<int> id, Nullable<decimal> areaLiveHouse, Nullable<int> countRoom, Nullable<int> countLivePeople)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var areaLiveHouseParameter = areaLiveHouse.HasValue ?
                new ObjectParameter("areaLiveHouse", areaLiveHouse) :
                new ObjectParameter("areaLiveHouse", typeof(decimal));
    
            var countRoomParameter = countRoom.HasValue ?
                new ObjectParameter("countRoom", countRoom) :
                new ObjectParameter("countRoom", typeof(int));
    
            var countLivePeopleParameter = countLivePeople.HasValue ?
                new ObjectParameter("countLivePeople", countLivePeople) :
                new ObjectParameter("countLivePeople", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменениеДанные_о_жилой_площади", idParameter, areaLiveHouseParameter, countRoomParameter, countLivePeopleParameter);
        }
    
        public virtual int ИзменениеДоверенность(string id, Nullable<System.DateTime> date)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменениеДоверенность", idParameter, dateParameter);
        }
    
        public virtual int ИзменениеДоговор_энергоснабжения(Nullable<int> id, Nullable<int> numMeterDev, Nullable<int> idAbonent, Nullable<int> idTariff, Nullable<int> idPresentComp, Nullable<System.DateTime> date, string specIf)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var numMeterDevParameter = numMeterDev.HasValue ?
                new ObjectParameter("numMeterDev", numMeterDev) :
                new ObjectParameter("numMeterDev", typeof(int));
    
            var idAbonentParameter = idAbonent.HasValue ?
                new ObjectParameter("idAbonent", idAbonent) :
                new ObjectParameter("idAbonent", typeof(int));
    
            var idTariffParameter = idTariff.HasValue ?
                new ObjectParameter("idTariff", idTariff) :
                new ObjectParameter("idTariff", typeof(int));
    
            var idPresentCompParameter = idPresentComp.HasValue ?
                new ObjectParameter("idPresentComp", idPresentComp) :
                new ObjectParameter("idPresentComp", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var specIfParameter = specIf != null ?
                new ObjectParameter("specIf", specIf) :
                new ObjectParameter("specIf", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменениеДоговор_энергоснабжения", idParameter, numMeterDevParameter, idAbonentParameter, idTariffParameter, idPresentCompParameter, dateParameter, specIfParameter);
        }
    
        public virtual int ИзменениеЗона_с(Nullable<int> id, string name)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменениеЗона_с", idParameter, nameParameter);
        }
    
        public virtual int ИзменениеКонтактные_данные(Nullable<int> id, Nullable<int> idAddress, string mobPhone, string phone, string email)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var idAddressParameter = idAddress.HasValue ?
                new ObjectParameter("idAddress", idAddress) :
                new ObjectParameter("idAddress", typeof(int));
    
            var mobPhoneParameter = mobPhone != null ?
                new ObjectParameter("mobPhone", mobPhone) :
                new ObjectParameter("mobPhone", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменениеКонтактные_данные", idParameter, idAddressParameter, mobPhoneParameter, phoneParameter, emailParameter);
        }
    
        public virtual int ИзменениеЛичные_данные(Nullable<int> id, string ln, string fn, string patronomyc, string gender, Nullable<System.DateTime> birthday)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var lnParameter = ln != null ?
                new ObjectParameter("ln", ln) :
                new ObjectParameter("ln", typeof(string));
    
            var fnParameter = fn != null ?
                new ObjectParameter("fn", fn) :
                new ObjectParameter("fn", typeof(string));
    
            var patronomycParameter = patronomyc != null ?
                new ObjectParameter("patronomyc", patronomyc) :
                new ObjectParameter("patronomyc", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("birthday", birthday) :
                new ObjectParameter("birthday", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменениеЛичные_данные", idParameter, lnParameter, fnParameter, patronomycParameter, genderParameter, birthdayParameter);
        }
    
        public virtual int ИзменениеПаспорт(Nullable<int> seria, Nullable<int> num, string whoGive, Nullable<int> idAddress)
        {
            var seriaParameter = seria.HasValue ?
                new ObjectParameter("seria", seria) :
                new ObjectParameter("seria", typeof(int));
    
            var numParameter = num.HasValue ?
                new ObjectParameter("num", num) :
                new ObjectParameter("num", typeof(int));
    
            var whoGiveParameter = whoGive != null ?
                new ObjectParameter("whoGive", whoGive) :
                new ObjectParameter("whoGive", typeof(string));
    
            var idAddressParameter = idAddress.HasValue ?
                new ObjectParameter("idAddress", idAddress) :
                new ObjectParameter("idAddress", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменениеПаспорт", seriaParameter, numParameter, whoGiveParameter, idAddressParameter);
        }
    
        public virtual int ИзменениеПоказания_прибора_учёта(Nullable<int> id, Nullable<int> iDContract, Nullable<int> prevStat, Nullable<int> currStat, Nullable<System.DateTime> date, Nullable<bool> endStat)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var iDContractParameter = iDContract.HasValue ?
                new ObjectParameter("IDContract", iDContract) :
                new ObjectParameter("IDContract", typeof(int));
    
            var prevStatParameter = prevStat.HasValue ?
                new ObjectParameter("PrevStat", prevStat) :
                new ObjectParameter("PrevStat", typeof(int));
    
            var currStatParameter = currStat.HasValue ?
                new ObjectParameter("CurrStat", currStat) :
                new ObjectParameter("CurrStat", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var endStatParameter = endStat.HasValue ?
                new ObjectParameter("endStat", endStat) :
                new ObjectParameter("endStat", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменениеПоказания_прибора_учёта", idParameter, iDContractParameter, prevStatParameter, currStatParameter, dateParameter, endStatParameter);
        }
    
        public virtual int ИзменениеПользователь(Nullable<int> id, string login, string password, string role)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("role", role) :
                new ObjectParameter("role", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменениеПользователь", idParameter, loginParameter, passwordParameter, roleParameter);
        }
    
        public virtual int ИзменениеПредставитель_компании(Nullable<int> id, Nullable<int> idPersData, string numDov)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var idPersDataParameter = idPersData.HasValue ?
                new ObjectParameter("idPersData", idPersData) :
                new ObjectParameter("idPersData", typeof(int));
    
            var numDovParameter = numDov != null ?
                new ObjectParameter("numDov", numDov) :
                new ObjectParameter("numDov", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменениеПредставитель_компании", idParameter, idPersDataParameter, numDovParameter);
        }
    
        public virtual int ИзменениеПрибор_учета(Nullable<int> id, string marka, string type, Nullable<int> calcCoeff, Nullable<System.DateTime> dateInstall, string destInstall)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var markaParameter = marka != null ?
                new ObjectParameter("marka", marka) :
                new ObjectParameter("marka", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var calcCoeffParameter = calcCoeff.HasValue ?
                new ObjectParameter("CalcCoeff", calcCoeff) :
                new ObjectParameter("CalcCoeff", typeof(int));
    
            var dateInstallParameter = dateInstall.HasValue ?
                new ObjectParameter("dateInstall", dateInstall) :
                new ObjectParameter("dateInstall", typeof(System.DateTime));
    
            var destInstallParameter = destInstall != null ?
                new ObjectParameter("destInstall", destInstall) :
                new ObjectParameter("destInstall", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменениеПрибор_учета", idParameter, markaParameter, typeParameter, calcCoeffParameter, dateInstallParameter, destInstallParameter);
        }
    
        public virtual int ИзменениеСтавка(Nullable<int> id, string idTariff, string idZoneDay, Nullable<decimal> cost)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var idTariffParameter = idTariff != null ?
                new ObjectParameter("idTariff", idTariff) :
                new ObjectParameter("idTariff", typeof(string));
    
            var idZoneDayParameter = idZoneDay != null ?
                new ObjectParameter("idZoneDay", idZoneDay) :
                new ObjectParameter("idZoneDay", typeof(string));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("cost", cost) :
                new ObjectParameter("cost", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменениеСтавка", idParameter, idTariffParameter, idZoneDayParameter, costParameter);
        }
    
        public virtual int ИзменениеТариф(Nullable<int> id, string typeMeter, string groupConsumer)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var typeMeterParameter = typeMeter != null ?
                new ObjectParameter("typeMeter", typeMeter) :
                new ObjectParameter("typeMeter", typeof(string));
    
            var groupConsumerParameter = groupConsumer != null ?
                new ObjectParameter("groupConsumer", groupConsumer) :
                new ObjectParameter("groupConsumer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ИзменениеТариф", idParameter, typeMeterParameter, groupConsumerParameter);
        }
    
        public virtual int УдалениеАкт_снятия_показаний_приборов_учета(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("УдалениеАкт_снятия_показаний_приборов_учета", idParameter);
        }
    
        public virtual int УдалениеВр_пер(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("УдалениеВр_пер", iDParameter);
        }
    
        public virtual int УдалениеПользователь(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("УдалениеПользователь", idParameter);
        }
    }
}
